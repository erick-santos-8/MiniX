// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId @String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  posts Post[] //1:n
  comments Comment[] //1:n
  likes Like[] //1:n

  following Follows[] @relation("following")
  followers Follows[] @relation("follower")

  notifications Notification[] @relation("userNotification")
  notificationsCreated Notification[] @relation("notificationCreator")
}

model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Realtions
  author User @relation(fields: [authorId],references: [id], onDelete: Cascade)
  //Deleta todos os posts se o usuário for deletado
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  //Relations
  author User @relation(field: [authorId],references: [id], onDelete: Cascade)
  post Post @relation(field: [postId],references: [id], onDelete: Cascade)

  @@index([authorId, postId])
  //index composto para queries rápidas
}
